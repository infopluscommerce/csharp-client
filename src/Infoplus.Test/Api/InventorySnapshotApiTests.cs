/* 
 * Infoplus API
 *
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Infoplus.Client;
using Infoplus.Api;
using Infoplus.Model;

namespace Infoplus.Test
{
    /// <summary>
    ///  Class for testing InventorySnapshotApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class InventorySnapshotApiTests
    {
        private InventorySnapshotApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new InventorySnapshotApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of InventorySnapshotApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' InventorySnapshotApi
            //Assert.IsInstanceOfType(typeof(InventorySnapshotApi), instance, "instance is a InventorySnapshotApi");
        }

        
        /// <summary>
        /// Test AddInventorySnapshotAudit
        /// </summary>
        [Test]
        public void AddInventorySnapshotAuditTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? inventorySnapshotId = null;
            //string inventorySnapshotAudit = null;
            //instance.AddInventorySnapshotAudit(inventorySnapshotId, inventorySnapshotAudit);
            
        }
        
        /// <summary>
        /// Test AddInventorySnapshotTag
        /// </summary>
        [Test]
        public void AddInventorySnapshotTagTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? inventorySnapshotId = null;
            //string inventorySnapshotTag = null;
            //instance.AddInventorySnapshotTag(inventorySnapshotId, inventorySnapshotTag);
            
        }
        
        /// <summary>
        /// Test DeleteInventorySnapshotTag
        /// </summary>
        [Test]
        public void DeleteInventorySnapshotTagTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? inventorySnapshotId = null;
            //string inventorySnapshotTag = null;
            //instance.DeleteInventorySnapshotTag(inventorySnapshotId, inventorySnapshotTag);
            
        }
        
        /// <summary>
        /// Test GetDuplicateInventorySnapshotById
        /// </summary>
        [Test]
        public void GetDuplicateInventorySnapshotByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? inventorySnapshotId = null;
            //var response = instance.GetDuplicateInventorySnapshotById(inventorySnapshotId);
            //Assert.IsInstanceOf<InventorySnapshot> (response, "response is InventorySnapshot");
        }
        
        /// <summary>
        /// Test GetInventorySnapshotByFilter
        /// </summary>
        [Test]
        public void GetInventorySnapshotByFilterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string filter = null;
            //int? page = null;
            //int? limit = null;
            //string sort = null;
            //var response = instance.GetInventorySnapshotByFilter(filter, page, limit, sort);
            //Assert.IsInstanceOf<List<InventorySnapshot>> (response, "response is List<InventorySnapshot>");
        }
        
        /// <summary>
        /// Test GetInventorySnapshotById
        /// </summary>
        [Test]
        public void GetInventorySnapshotByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? inventorySnapshotId = null;
            //var response = instance.GetInventorySnapshotById(inventorySnapshotId);
            //Assert.IsInstanceOf<InventorySnapshot> (response, "response is InventorySnapshot");
        }
        
        /// <summary>
        /// Test GetInventorySnapshotTags
        /// </summary>
        [Test]
        public void GetInventorySnapshotTagsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? inventorySnapshotId = null;
            //instance.GetInventorySnapshotTags(inventorySnapshotId);
            
        }
        
    }

}
