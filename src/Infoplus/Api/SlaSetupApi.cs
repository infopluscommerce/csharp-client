/* 
 * Infoplus API
 *
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Infoplus.Client;
using Infoplus.Model;

namespace Infoplus.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISlaSetupApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add new audit for a slaSetup
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing slaSetup.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="slaSetupId">Id of the slaSetup to add an audit to</param>
        /// <param name="slaSetupAudit">The audit to add</param>
        /// <returns></returns>
        void AddSlaSetupAudit (int? slaSetupId, string slaSetupAudit);

        /// <summary>
        /// Add new audit for a slaSetup
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing slaSetup.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="slaSetupId">Id of the slaSetup to add an audit to</param>
        /// <param name="slaSetupAudit">The audit to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddSlaSetupAuditWithHttpInfo (int? slaSetupId, string slaSetupAudit);
        /// <summary>
        /// Add new tags for a slaSetup.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing slaSetup.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="slaSetupId">Id of the slaSetup to add a tag to</param>
        /// <param name="slaSetupTag">The tag to add</param>
        /// <returns></returns>
        void AddSlaSetupTag (int? slaSetupId, string slaSetupTag);

        /// <summary>
        /// Add new tags for a slaSetup.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing slaSetup.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="slaSetupId">Id of the slaSetup to add a tag to</param>
        /// <param name="slaSetupTag">The tag to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddSlaSetupTagWithHttpInfo (int? slaSetupId, string slaSetupTag);
        /// <summary>
        /// Delete a tag for a slaSetup.
        /// </summary>
        /// <remarks>
        /// Deletes an existing slaSetup tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="slaSetupId">Id of the slaSetup to remove tag from</param>
        /// <param name="slaSetupTag">The tag to delete</param>
        /// <returns></returns>
        void DeleteSlaSetupTag (int? slaSetupId, string slaSetupTag);

        /// <summary>
        /// Delete a tag for a slaSetup.
        /// </summary>
        /// <remarks>
        /// Deletes an existing slaSetup tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="slaSetupId">Id of the slaSetup to remove tag from</param>
        /// <param name="slaSetupTag">The tag to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteSlaSetupTagWithHttpInfo (int? slaSetupId, string slaSetupTag);
        /// <summary>
        /// Get a duplicated a slaSetup by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated slaSetup identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="slaSetupId">Id of the slaSetup to be duplicated.</param>
        /// <returns>SlaSetup</returns>
        SlaSetup GetDuplicateSlaSetupById (int? slaSetupId);

        /// <summary>
        /// Get a duplicated a slaSetup by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated slaSetup identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="slaSetupId">Id of the slaSetup to be duplicated.</param>
        /// <returns>ApiResponse of SlaSetup</returns>
        ApiResponse<SlaSetup> GetDuplicateSlaSetupByIdWithHttpInfo (int? slaSetupId);
        /// <summary>
        /// Search slaSetups by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of slaSetups that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>List&lt;SlaSetup&gt;</returns>
        List<SlaSetup> GetSlaSetupByFilter (string filter = null, int? page = null, int? limit = null, string sort = null);

        /// <summary>
        /// Search slaSetups by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of slaSetups that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>ApiResponse of List&lt;SlaSetup&gt;</returns>
        ApiResponse<List<SlaSetup>> GetSlaSetupByFilterWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null);
        /// <summary>
        /// Get a slaSetup by id
        /// </summary>
        /// <remarks>
        /// Returns the slaSetup identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="slaSetupId">Id of the slaSetup to be returned.</param>
        /// <returns>SlaSetup</returns>
        SlaSetup GetSlaSetupById (int? slaSetupId);

        /// <summary>
        /// Get a slaSetup by id
        /// </summary>
        /// <remarks>
        /// Returns the slaSetup identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="slaSetupId">Id of the slaSetup to be returned.</param>
        /// <returns>ApiResponse of SlaSetup</returns>
        ApiResponse<SlaSetup> GetSlaSetupByIdWithHttpInfo (int? slaSetupId);
        /// <summary>
        /// Get the tags for a slaSetup.
        /// </summary>
        /// <remarks>
        /// Get all existing slaSetup tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="slaSetupId">Id of the slaSetup to get tags for</param>
        /// <returns></returns>
        void GetSlaSetupTags (int? slaSetupId);

        /// <summary>
        /// Get the tags for a slaSetup.
        /// </summary>
        /// <remarks>
        /// Get all existing slaSetup tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="slaSetupId">Id of the slaSetup to get tags for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetSlaSetupTagsWithHttpInfo (int? slaSetupId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Add new audit for a slaSetup
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing slaSetup.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="slaSetupId">Id of the slaSetup to add an audit to</param>
        /// <param name="slaSetupAudit">The audit to add</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddSlaSetupAuditAsync (int? slaSetupId, string slaSetupAudit);

        /// <summary>
        /// Add new audit for a slaSetup
        /// </summary>
        /// <remarks>
        /// Adds an audit to an existing slaSetup.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="slaSetupId">Id of the slaSetup to add an audit to</param>
        /// <param name="slaSetupAudit">The audit to add</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddSlaSetupAuditAsyncWithHttpInfo (int? slaSetupId, string slaSetupAudit);
        /// <summary>
        /// Add new tags for a slaSetup.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing slaSetup.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="slaSetupId">Id of the slaSetup to add a tag to</param>
        /// <param name="slaSetupTag">The tag to add</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddSlaSetupTagAsync (int? slaSetupId, string slaSetupTag);

        /// <summary>
        /// Add new tags for a slaSetup.
        /// </summary>
        /// <remarks>
        /// Adds a tag to an existing slaSetup.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="slaSetupId">Id of the slaSetup to add a tag to</param>
        /// <param name="slaSetupTag">The tag to add</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddSlaSetupTagAsyncWithHttpInfo (int? slaSetupId, string slaSetupTag);
        /// <summary>
        /// Delete a tag for a slaSetup.
        /// </summary>
        /// <remarks>
        /// Deletes an existing slaSetup tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="slaSetupId">Id of the slaSetup to remove tag from</param>
        /// <param name="slaSetupTag">The tag to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteSlaSetupTagAsync (int? slaSetupId, string slaSetupTag);

        /// <summary>
        /// Delete a tag for a slaSetup.
        /// </summary>
        /// <remarks>
        /// Deletes an existing slaSetup tag using the specified data.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="slaSetupId">Id of the slaSetup to remove tag from</param>
        /// <param name="slaSetupTag">The tag to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteSlaSetupTagAsyncWithHttpInfo (int? slaSetupId, string slaSetupTag);
        /// <summary>
        /// Get a duplicated a slaSetup by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated slaSetup identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="slaSetupId">Id of the slaSetup to be duplicated.</param>
        /// <returns>Task of SlaSetup</returns>
        System.Threading.Tasks.Task<SlaSetup> GetDuplicateSlaSetupByIdAsync (int? slaSetupId);

        /// <summary>
        /// Get a duplicated a slaSetup by id
        /// </summary>
        /// <remarks>
        /// Returns a duplicated slaSetup identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="slaSetupId">Id of the slaSetup to be duplicated.</param>
        /// <returns>Task of ApiResponse (SlaSetup)</returns>
        System.Threading.Tasks.Task<ApiResponse<SlaSetup>> GetDuplicateSlaSetupByIdAsyncWithHttpInfo (int? slaSetupId);
        /// <summary>
        /// Search slaSetups by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of slaSetups that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of List&lt;SlaSetup&gt;</returns>
        System.Threading.Tasks.Task<List<SlaSetup>> GetSlaSetupByFilterAsync (string filter = null, int? page = null, int? limit = null, string sort = null);

        /// <summary>
        /// Search slaSetups by filter
        /// </summary>
        /// <remarks>
        /// Returns the list of slaSetups that match the given filter.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;SlaSetup&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SlaSetup>>> GetSlaSetupByFilterAsyncWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null);
        /// <summary>
        /// Get a slaSetup by id
        /// </summary>
        /// <remarks>
        /// Returns the slaSetup identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="slaSetupId">Id of the slaSetup to be returned.</param>
        /// <returns>Task of SlaSetup</returns>
        System.Threading.Tasks.Task<SlaSetup> GetSlaSetupByIdAsync (int? slaSetupId);

        /// <summary>
        /// Get a slaSetup by id
        /// </summary>
        /// <remarks>
        /// Returns the slaSetup identified by the specified id.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="slaSetupId">Id of the slaSetup to be returned.</param>
        /// <returns>Task of ApiResponse (SlaSetup)</returns>
        System.Threading.Tasks.Task<ApiResponse<SlaSetup>> GetSlaSetupByIdAsyncWithHttpInfo (int? slaSetupId);
        /// <summary>
        /// Get the tags for a slaSetup.
        /// </summary>
        /// <remarks>
        /// Get all existing slaSetup tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="slaSetupId">Id of the slaSetup to get tags for</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetSlaSetupTagsAsync (int? slaSetupId);

        /// <summary>
        /// Get the tags for a slaSetup.
        /// </summary>
        /// <remarks>
        /// Get all existing slaSetup tags.
        /// </remarks>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="slaSetupId">Id of the slaSetup to get tags for</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetSlaSetupTagsAsyncWithHttpInfo (int? slaSetupId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SlaSetupApi : ISlaSetupApi
    {
        private Infoplus.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SlaSetupApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SlaSetupApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Infoplus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SlaSetupApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SlaSetupApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Infoplus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Infoplus.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Add new audit for a slaSetup Adds an audit to an existing slaSetup.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="slaSetupId">Id of the slaSetup to add an audit to</param>
        /// <param name="slaSetupAudit">The audit to add</param>
        /// <returns></returns>
        public void AddSlaSetupAudit (int? slaSetupId, string slaSetupAudit)
        {
             AddSlaSetupAuditWithHttpInfo(slaSetupId, slaSetupAudit);
        }

        /// <summary>
        /// Add new audit for a slaSetup Adds an audit to an existing slaSetup.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="slaSetupId">Id of the slaSetup to add an audit to</param>
        /// <param name="slaSetupAudit">The audit to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddSlaSetupAuditWithHttpInfo (int? slaSetupId, string slaSetupAudit)
        {
            // verify the required parameter 'slaSetupId' is set
            if (slaSetupId == null)
                throw new ApiException(400, "Missing required parameter 'slaSetupId' when calling SlaSetupApi->AddSlaSetupAudit");
            // verify the required parameter 'slaSetupAudit' is set
            if (slaSetupAudit == null)
                throw new ApiException(400, "Missing required parameter 'slaSetupAudit' when calling SlaSetupApi->AddSlaSetupAudit");

            var localVarPath = "/beta/slaSetup/{slaSetupId}/audit/{slaSetupAudit}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (slaSetupId != null) localVarPathParams.Add("slaSetupId", Configuration.ApiClient.ParameterToString(slaSetupId)); // path parameter
            if (slaSetupAudit != null) localVarPathParams.Add("slaSetupAudit", Configuration.ApiClient.ParameterToString(slaSetupAudit)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddSlaSetupAudit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new audit for a slaSetup Adds an audit to an existing slaSetup.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="slaSetupId">Id of the slaSetup to add an audit to</param>
        /// <param name="slaSetupAudit">The audit to add</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddSlaSetupAuditAsync (int? slaSetupId, string slaSetupAudit)
        {
             await AddSlaSetupAuditAsyncWithHttpInfo(slaSetupId, slaSetupAudit);

        }

        /// <summary>
        /// Add new audit for a slaSetup Adds an audit to an existing slaSetup.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="slaSetupId">Id of the slaSetup to add an audit to</param>
        /// <param name="slaSetupAudit">The audit to add</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddSlaSetupAuditAsyncWithHttpInfo (int? slaSetupId, string slaSetupAudit)
        {
            // verify the required parameter 'slaSetupId' is set
            if (slaSetupId == null)
                throw new ApiException(400, "Missing required parameter 'slaSetupId' when calling SlaSetupApi->AddSlaSetupAudit");
            // verify the required parameter 'slaSetupAudit' is set
            if (slaSetupAudit == null)
                throw new ApiException(400, "Missing required parameter 'slaSetupAudit' when calling SlaSetupApi->AddSlaSetupAudit");

            var localVarPath = "/beta/slaSetup/{slaSetupId}/audit/{slaSetupAudit}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (slaSetupId != null) localVarPathParams.Add("slaSetupId", Configuration.ApiClient.ParameterToString(slaSetupId)); // path parameter
            if (slaSetupAudit != null) localVarPathParams.Add("slaSetupAudit", Configuration.ApiClient.ParameterToString(slaSetupAudit)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddSlaSetupAudit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new tags for a slaSetup. Adds a tag to an existing slaSetup.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="slaSetupId">Id of the slaSetup to add a tag to</param>
        /// <param name="slaSetupTag">The tag to add</param>
        /// <returns></returns>
        public void AddSlaSetupTag (int? slaSetupId, string slaSetupTag)
        {
             AddSlaSetupTagWithHttpInfo(slaSetupId, slaSetupTag);
        }

        /// <summary>
        /// Add new tags for a slaSetup. Adds a tag to an existing slaSetup.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="slaSetupId">Id of the slaSetup to add a tag to</param>
        /// <param name="slaSetupTag">The tag to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddSlaSetupTagWithHttpInfo (int? slaSetupId, string slaSetupTag)
        {
            // verify the required parameter 'slaSetupId' is set
            if (slaSetupId == null)
                throw new ApiException(400, "Missing required parameter 'slaSetupId' when calling SlaSetupApi->AddSlaSetupTag");
            // verify the required parameter 'slaSetupTag' is set
            if (slaSetupTag == null)
                throw new ApiException(400, "Missing required parameter 'slaSetupTag' when calling SlaSetupApi->AddSlaSetupTag");

            var localVarPath = "/beta/slaSetup/{slaSetupId}/tag/{slaSetupTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (slaSetupId != null) localVarPathParams.Add("slaSetupId", Configuration.ApiClient.ParameterToString(slaSetupId)); // path parameter
            if (slaSetupTag != null) localVarPathParams.Add("slaSetupTag", Configuration.ApiClient.ParameterToString(slaSetupTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddSlaSetupTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add new tags for a slaSetup. Adds a tag to an existing slaSetup.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="slaSetupId">Id of the slaSetup to add a tag to</param>
        /// <param name="slaSetupTag">The tag to add</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddSlaSetupTagAsync (int? slaSetupId, string slaSetupTag)
        {
             await AddSlaSetupTagAsyncWithHttpInfo(slaSetupId, slaSetupTag);

        }

        /// <summary>
        /// Add new tags for a slaSetup. Adds a tag to an existing slaSetup.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="slaSetupId">Id of the slaSetup to add a tag to</param>
        /// <param name="slaSetupTag">The tag to add</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddSlaSetupTagAsyncWithHttpInfo (int? slaSetupId, string slaSetupTag)
        {
            // verify the required parameter 'slaSetupId' is set
            if (slaSetupId == null)
                throw new ApiException(400, "Missing required parameter 'slaSetupId' when calling SlaSetupApi->AddSlaSetupTag");
            // verify the required parameter 'slaSetupTag' is set
            if (slaSetupTag == null)
                throw new ApiException(400, "Missing required parameter 'slaSetupTag' when calling SlaSetupApi->AddSlaSetupTag");

            var localVarPath = "/beta/slaSetup/{slaSetupId}/tag/{slaSetupTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (slaSetupId != null) localVarPathParams.Add("slaSetupId", Configuration.ApiClient.ParameterToString(slaSetupId)); // path parameter
            if (slaSetupTag != null) localVarPathParams.Add("slaSetupTag", Configuration.ApiClient.ParameterToString(slaSetupTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddSlaSetupTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a tag for a slaSetup. Deletes an existing slaSetup tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="slaSetupId">Id of the slaSetup to remove tag from</param>
        /// <param name="slaSetupTag">The tag to delete</param>
        /// <returns></returns>
        public void DeleteSlaSetupTag (int? slaSetupId, string slaSetupTag)
        {
             DeleteSlaSetupTagWithHttpInfo(slaSetupId, slaSetupTag);
        }

        /// <summary>
        /// Delete a tag for a slaSetup. Deletes an existing slaSetup tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="slaSetupId">Id of the slaSetup to remove tag from</param>
        /// <param name="slaSetupTag">The tag to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteSlaSetupTagWithHttpInfo (int? slaSetupId, string slaSetupTag)
        {
            // verify the required parameter 'slaSetupId' is set
            if (slaSetupId == null)
                throw new ApiException(400, "Missing required parameter 'slaSetupId' when calling SlaSetupApi->DeleteSlaSetupTag");
            // verify the required parameter 'slaSetupTag' is set
            if (slaSetupTag == null)
                throw new ApiException(400, "Missing required parameter 'slaSetupTag' when calling SlaSetupApi->DeleteSlaSetupTag");

            var localVarPath = "/beta/slaSetup/{slaSetupId}/tag/{slaSetupTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (slaSetupId != null) localVarPathParams.Add("slaSetupId", Configuration.ApiClient.ParameterToString(slaSetupId)); // path parameter
            if (slaSetupTag != null) localVarPathParams.Add("slaSetupTag", Configuration.ApiClient.ParameterToString(slaSetupTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteSlaSetupTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a tag for a slaSetup. Deletes an existing slaSetup tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="slaSetupId">Id of the slaSetup to remove tag from</param>
        /// <param name="slaSetupTag">The tag to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteSlaSetupTagAsync (int? slaSetupId, string slaSetupTag)
        {
             await DeleteSlaSetupTagAsyncWithHttpInfo(slaSetupId, slaSetupTag);

        }

        /// <summary>
        /// Delete a tag for a slaSetup. Deletes an existing slaSetup tag using the specified data.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="slaSetupId">Id of the slaSetup to remove tag from</param>
        /// <param name="slaSetupTag">The tag to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteSlaSetupTagAsyncWithHttpInfo (int? slaSetupId, string slaSetupTag)
        {
            // verify the required parameter 'slaSetupId' is set
            if (slaSetupId == null)
                throw new ApiException(400, "Missing required parameter 'slaSetupId' when calling SlaSetupApi->DeleteSlaSetupTag");
            // verify the required parameter 'slaSetupTag' is set
            if (slaSetupTag == null)
                throw new ApiException(400, "Missing required parameter 'slaSetupTag' when calling SlaSetupApi->DeleteSlaSetupTag");

            var localVarPath = "/beta/slaSetup/{slaSetupId}/tag/{slaSetupTag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (slaSetupId != null) localVarPathParams.Add("slaSetupId", Configuration.ApiClient.ParameterToString(slaSetupId)); // path parameter
            if (slaSetupTag != null) localVarPathParams.Add("slaSetupTag", Configuration.ApiClient.ParameterToString(slaSetupTag)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteSlaSetupTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get a duplicated a slaSetup by id Returns a duplicated slaSetup identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="slaSetupId">Id of the slaSetup to be duplicated.</param>
        /// <returns>SlaSetup</returns>
        public SlaSetup GetDuplicateSlaSetupById (int? slaSetupId)
        {
             ApiResponse<SlaSetup> localVarResponse = GetDuplicateSlaSetupByIdWithHttpInfo(slaSetupId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a duplicated a slaSetup by id Returns a duplicated slaSetup identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="slaSetupId">Id of the slaSetup to be duplicated.</param>
        /// <returns>ApiResponse of SlaSetup</returns>
        public ApiResponse< SlaSetup > GetDuplicateSlaSetupByIdWithHttpInfo (int? slaSetupId)
        {
            // verify the required parameter 'slaSetupId' is set
            if (slaSetupId == null)
                throw new ApiException(400, "Missing required parameter 'slaSetupId' when calling SlaSetupApi->GetDuplicateSlaSetupById");

            var localVarPath = "/beta/slaSetup/duplicate/{slaSetupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (slaSetupId != null) localVarPathParams.Add("slaSetupId", Configuration.ApiClient.ParameterToString(slaSetupId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDuplicateSlaSetupById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SlaSetup>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SlaSetup) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SlaSetup)));
        }

        /// <summary>
        /// Get a duplicated a slaSetup by id Returns a duplicated slaSetup identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="slaSetupId">Id of the slaSetup to be duplicated.</param>
        /// <returns>Task of SlaSetup</returns>
        public async System.Threading.Tasks.Task<SlaSetup> GetDuplicateSlaSetupByIdAsync (int? slaSetupId)
        {
             ApiResponse<SlaSetup> localVarResponse = await GetDuplicateSlaSetupByIdAsyncWithHttpInfo(slaSetupId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a duplicated a slaSetup by id Returns a duplicated slaSetup identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="slaSetupId">Id of the slaSetup to be duplicated.</param>
        /// <returns>Task of ApiResponse (SlaSetup)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SlaSetup>> GetDuplicateSlaSetupByIdAsyncWithHttpInfo (int? slaSetupId)
        {
            // verify the required parameter 'slaSetupId' is set
            if (slaSetupId == null)
                throw new ApiException(400, "Missing required parameter 'slaSetupId' when calling SlaSetupApi->GetDuplicateSlaSetupById");

            var localVarPath = "/beta/slaSetup/duplicate/{slaSetupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (slaSetupId != null) localVarPathParams.Add("slaSetupId", Configuration.ApiClient.ParameterToString(slaSetupId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDuplicateSlaSetupById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SlaSetup>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SlaSetup) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SlaSetup)));
        }

        /// <summary>
        /// Search slaSetups by filter Returns the list of slaSetups that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>List&lt;SlaSetup&gt;</returns>
        public List<SlaSetup> GetSlaSetupByFilter (string filter = null, int? page = null, int? limit = null, string sort = null)
        {
             ApiResponse<List<SlaSetup>> localVarResponse = GetSlaSetupByFilterWithHttpInfo(filter, page, limit, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search slaSetups by filter Returns the list of slaSetups that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>ApiResponse of List&lt;SlaSetup&gt;</returns>
        public ApiResponse< List<SlaSetup> > GetSlaSetupByFilterWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null)
        {

            var localVarPath = "/beta/slaSetup/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSlaSetupByFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SlaSetup>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<SlaSetup>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SlaSetup>)));
        }

        /// <summary>
        /// Search slaSetups by filter Returns the list of slaSetups that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of List&lt;SlaSetup&gt;</returns>
        public async System.Threading.Tasks.Task<List<SlaSetup>> GetSlaSetupByFilterAsync (string filter = null, int? page = null, int? limit = null, string sort = null)
        {
             ApiResponse<List<SlaSetup>> localVarResponse = await GetSlaSetupByFilterAsyncWithHttpInfo(filter, page, limit, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search slaSetups by filter Returns the list of slaSetups that match the given filter.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Query string, used to filter results. (optional)</param>
        /// <param name="page">Result page number.  Defaults to 1. (optional)</param>
        /// <param name="limit">Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)</param>
        /// <param name="sort">Sort results by specified field. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;SlaSetup&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<SlaSetup>>> GetSlaSetupByFilterAsyncWithHttpInfo (string filter = null, int? page = null, int? limit = null, string sort = null)
        {

            var localVarPath = "/beta/slaSetup/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSlaSetupByFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SlaSetup>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<SlaSetup>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SlaSetup>)));
        }

        /// <summary>
        /// Get a slaSetup by id Returns the slaSetup identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="slaSetupId">Id of the slaSetup to be returned.</param>
        /// <returns>SlaSetup</returns>
        public SlaSetup GetSlaSetupById (int? slaSetupId)
        {
             ApiResponse<SlaSetup> localVarResponse = GetSlaSetupByIdWithHttpInfo(slaSetupId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a slaSetup by id Returns the slaSetup identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="slaSetupId">Id of the slaSetup to be returned.</param>
        /// <returns>ApiResponse of SlaSetup</returns>
        public ApiResponse< SlaSetup > GetSlaSetupByIdWithHttpInfo (int? slaSetupId)
        {
            // verify the required parameter 'slaSetupId' is set
            if (slaSetupId == null)
                throw new ApiException(400, "Missing required parameter 'slaSetupId' when calling SlaSetupApi->GetSlaSetupById");

            var localVarPath = "/beta/slaSetup/{slaSetupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (slaSetupId != null) localVarPathParams.Add("slaSetupId", Configuration.ApiClient.ParameterToString(slaSetupId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSlaSetupById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SlaSetup>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SlaSetup) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SlaSetup)));
        }

        /// <summary>
        /// Get a slaSetup by id Returns the slaSetup identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="slaSetupId">Id of the slaSetup to be returned.</param>
        /// <returns>Task of SlaSetup</returns>
        public async System.Threading.Tasks.Task<SlaSetup> GetSlaSetupByIdAsync (int? slaSetupId)
        {
             ApiResponse<SlaSetup> localVarResponse = await GetSlaSetupByIdAsyncWithHttpInfo(slaSetupId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a slaSetup by id Returns the slaSetup identified by the specified id.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="slaSetupId">Id of the slaSetup to be returned.</param>
        /// <returns>Task of ApiResponse (SlaSetup)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SlaSetup>> GetSlaSetupByIdAsyncWithHttpInfo (int? slaSetupId)
        {
            // verify the required parameter 'slaSetupId' is set
            if (slaSetupId == null)
                throw new ApiException(400, "Missing required parameter 'slaSetupId' when calling SlaSetupApi->GetSlaSetupById");

            var localVarPath = "/beta/slaSetup/{slaSetupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (slaSetupId != null) localVarPathParams.Add("slaSetupId", Configuration.ApiClient.ParameterToString(slaSetupId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSlaSetupById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SlaSetup>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SlaSetup) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SlaSetup)));
        }

        /// <summary>
        /// Get the tags for a slaSetup. Get all existing slaSetup tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="slaSetupId">Id of the slaSetup to get tags for</param>
        /// <returns></returns>
        public void GetSlaSetupTags (int? slaSetupId)
        {
             GetSlaSetupTagsWithHttpInfo(slaSetupId);
        }

        /// <summary>
        /// Get the tags for a slaSetup. Get all existing slaSetup tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="slaSetupId">Id of the slaSetup to get tags for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetSlaSetupTagsWithHttpInfo (int? slaSetupId)
        {
            // verify the required parameter 'slaSetupId' is set
            if (slaSetupId == null)
                throw new ApiException(400, "Missing required parameter 'slaSetupId' when calling SlaSetupApi->GetSlaSetupTags");

            var localVarPath = "/beta/slaSetup/{slaSetupId}/tag";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (slaSetupId != null) localVarPathParams.Add("slaSetupId", Configuration.ApiClient.ParameterToString(slaSetupId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSlaSetupTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the tags for a slaSetup. Get all existing slaSetup tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="slaSetupId">Id of the slaSetup to get tags for</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetSlaSetupTagsAsync (int? slaSetupId)
        {
             await GetSlaSetupTagsAsyncWithHttpInfo(slaSetupId);

        }

        /// <summary>
        /// Get the tags for a slaSetup. Get all existing slaSetup tags.
        /// </summary>
        /// <exception cref="Infoplus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="slaSetupId">Id of the slaSetup to get tags for</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetSlaSetupTagsAsyncWithHttpInfo (int? slaSetupId)
        {
            // verify the required parameter 'slaSetupId' is set
            if (slaSetupId == null)
                throw new ApiException(400, "Missing required parameter 'slaSetupId' when calling SlaSetupApi->GetSlaSetupTags");

            var localVarPath = "/beta/slaSetup/{slaSetupId}/tag";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (slaSetupId != null) localVarPathParams.Add("slaSetupId", Configuration.ApiClient.ParameterToString(slaSetupId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = Configuration.GetApiKeyWithPrefix("API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSlaSetupTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
