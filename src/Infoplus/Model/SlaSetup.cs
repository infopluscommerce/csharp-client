/* 
 * Infoplus API
 *
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Infoplus.Client.SwaggerDateConverter;

namespace Infoplus.Model
{
    /// <summary>
    /// SlaSetup
    /// </summary>
    [DataContract]
    public partial class SlaSetup :  IEquatable<SlaSetup>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SlaSetup" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SlaSetup() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SlaSetup" /> class.
        /// </summary>
        /// <param name="LobId">LobId (required).</param>
        /// <param name="CustomFields">CustomFields.</param>
        public SlaSetup(int? LobId = default(int?), Dictionary<string, Object> CustomFields = default(Dictionary<string, Object>))
        {
            // to ensure "LobId" is required (not null)
            if (LobId == null)
            {
                throw new InvalidDataException("LobId is a required property for SlaSetup and cannot be null");
            }
            else
            {
                this.LobId = LobId;
            }
            this.CustomFields = CustomFields;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; private set; }

        /// <summary>
        /// Gets or Sets LobId
        /// </summary>
        [DataMember(Name="lobId", EmitDefaultValue=false)]
        public int? LobId { get; set; }

        /// <summary>
        /// Gets or Sets WarehouseId
        /// </summary>
        [DataMember(Name="warehouseId", EmitDefaultValue=false)]
        public int? WarehouseId { get; private set; }

        /// <summary>
        /// Gets or Sets EffectiveDate
        /// </summary>
        [DataMember(Name="effectiveDate", EmitDefaultValue=false)]
        public DateTime? EffectiveDate { get; private set; }

        /// <summary>
        /// Gets or Sets StandardServiceDays
        /// </summary>
        [DataMember(Name="standardServiceDays", EmitDefaultValue=false)]
        public int? StandardServiceDays { get; private set; }

        /// <summary>
        /// Gets or Sets StandardServiceCutoffHour
        /// </summary>
        [DataMember(Name="standardServiceCutoffHour", EmitDefaultValue=false)]
        public int? StandardServiceCutoffHour { get; private set; }

        /// <summary>
        /// Gets or Sets MassDistributionServiceDays
        /// </summary>
        [DataMember(Name="massDistributionServiceDays", EmitDefaultValue=false)]
        public int? MassDistributionServiceDays { get; private set; }

        /// <summary>
        /// Gets or Sets MassDistributionServiceCutoffHour
        /// </summary>
        [DataMember(Name="massDistributionServiceCutoffHour", EmitDefaultValue=false)]
        public int? MassDistributionServiceCutoffHour { get; private set; }

        /// <summary>
        /// Gets or Sets BackorderServiceDays
        /// </summary>
        [DataMember(Name="backorderServiceDays", EmitDefaultValue=false)]
        public int? BackorderServiceDays { get; private set; }

        /// <summary>
        /// Gets or Sets BackorderServiceCutoffHour
        /// </summary>
        [DataMember(Name="backorderServiceCutoffHour", EmitDefaultValue=false)]
        public int? BackorderServiceCutoffHour { get; private set; }

        /// <summary>
        /// Gets or Sets RushServiceCutoffHour
        /// </summary>
        [DataMember(Name="rushServiceCutoffHour", EmitDefaultValue=false)]
        public int? RushServiceCutoffHour { get; private set; }

        /// <summary>
        /// Gets or Sets CustomFields
        /// </summary>
        [DataMember(Name="customFields", EmitDefaultValue=false)]
        public Dictionary<string, Object> CustomFields { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SlaSetup {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  LobId: ").Append(LobId).Append("\n");
            sb.Append("  WarehouseId: ").Append(WarehouseId).Append("\n");
            sb.Append("  EffectiveDate: ").Append(EffectiveDate).Append("\n");
            sb.Append("  StandardServiceDays: ").Append(StandardServiceDays).Append("\n");
            sb.Append("  StandardServiceCutoffHour: ").Append(StandardServiceCutoffHour).Append("\n");
            sb.Append("  MassDistributionServiceDays: ").Append(MassDistributionServiceDays).Append("\n");
            sb.Append("  MassDistributionServiceCutoffHour: ").Append(MassDistributionServiceCutoffHour).Append("\n");
            sb.Append("  BackorderServiceDays: ").Append(BackorderServiceDays).Append("\n");
            sb.Append("  BackorderServiceCutoffHour: ").Append(BackorderServiceCutoffHour).Append("\n");
            sb.Append("  RushServiceCutoffHour: ").Append(RushServiceCutoffHour).Append("\n");
            sb.Append("  CustomFields: ").Append(CustomFields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SlaSetup);
        }

        /// <summary>
        /// Returns true if SlaSetup instances are equal
        /// </summary>
        /// <param name="input">Instance of SlaSetup to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SlaSetup input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.LobId == input.LobId ||
                    (this.LobId != null &&
                    this.LobId.Equals(input.LobId))
                ) && 
                (
                    this.WarehouseId == input.WarehouseId ||
                    (this.WarehouseId != null &&
                    this.WarehouseId.Equals(input.WarehouseId))
                ) && 
                (
                    this.EffectiveDate == input.EffectiveDate ||
                    (this.EffectiveDate != null &&
                    this.EffectiveDate.Equals(input.EffectiveDate))
                ) && 
                (
                    this.StandardServiceDays == input.StandardServiceDays ||
                    (this.StandardServiceDays != null &&
                    this.StandardServiceDays.Equals(input.StandardServiceDays))
                ) && 
                (
                    this.StandardServiceCutoffHour == input.StandardServiceCutoffHour ||
                    (this.StandardServiceCutoffHour != null &&
                    this.StandardServiceCutoffHour.Equals(input.StandardServiceCutoffHour))
                ) && 
                (
                    this.MassDistributionServiceDays == input.MassDistributionServiceDays ||
                    (this.MassDistributionServiceDays != null &&
                    this.MassDistributionServiceDays.Equals(input.MassDistributionServiceDays))
                ) && 
                (
                    this.MassDistributionServiceCutoffHour == input.MassDistributionServiceCutoffHour ||
                    (this.MassDistributionServiceCutoffHour != null &&
                    this.MassDistributionServiceCutoffHour.Equals(input.MassDistributionServiceCutoffHour))
                ) && 
                (
                    this.BackorderServiceDays == input.BackorderServiceDays ||
                    (this.BackorderServiceDays != null &&
                    this.BackorderServiceDays.Equals(input.BackorderServiceDays))
                ) && 
                (
                    this.BackorderServiceCutoffHour == input.BackorderServiceCutoffHour ||
                    (this.BackorderServiceCutoffHour != null &&
                    this.BackorderServiceCutoffHour.Equals(input.BackorderServiceCutoffHour))
                ) && 
                (
                    this.RushServiceCutoffHour == input.RushServiceCutoffHour ||
                    (this.RushServiceCutoffHour != null &&
                    this.RushServiceCutoffHour.Equals(input.RushServiceCutoffHour))
                ) && 
                (
                    this.CustomFields == input.CustomFields ||
                    this.CustomFields != null &&
                    this.CustomFields.SequenceEqual(input.CustomFields)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.LobId != null)
                    hashCode = hashCode * 59 + this.LobId.GetHashCode();
                if (this.WarehouseId != null)
                    hashCode = hashCode * 59 + this.WarehouseId.GetHashCode();
                if (this.EffectiveDate != null)
                    hashCode = hashCode * 59 + this.EffectiveDate.GetHashCode();
                if (this.StandardServiceDays != null)
                    hashCode = hashCode * 59 + this.StandardServiceDays.GetHashCode();
                if (this.StandardServiceCutoffHour != null)
                    hashCode = hashCode * 59 + this.StandardServiceCutoffHour.GetHashCode();
                if (this.MassDistributionServiceDays != null)
                    hashCode = hashCode * 59 + this.MassDistributionServiceDays.GetHashCode();
                if (this.MassDistributionServiceCutoffHour != null)
                    hashCode = hashCode * 59 + this.MassDistributionServiceCutoffHour.GetHashCode();
                if (this.BackorderServiceDays != null)
                    hashCode = hashCode * 59 + this.BackorderServiceDays.GetHashCode();
                if (this.BackorderServiceCutoffHour != null)
                    hashCode = hashCode * 59 + this.BackorderServiceCutoffHour.GetHashCode();
                if (this.RushServiceCutoffHour != null)
                    hashCode = hashCode * 59 + this.RushServiceCutoffHour.GetHashCode();
                if (this.CustomFields != null)
                    hashCode = hashCode * 59 + this.CustomFields.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
